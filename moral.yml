type: ipvs
heartbeat:
  primary: "ipvs1"
  me: ${MORAL_HOSTNAME}
  hosts:
    - ipvs1
    - ipvs2
  rise: 1
  fall: 1
  interval: 1
  type: http
  events:
    rise:
      shell: "ifconfig eth0:0 127.0.0.2"
    fall:
      shell: "ifconfig eth0:0 down"
  definition:
    endpoint: http://${MORAL_SLAVE}
    timeout: 2
    headers:
      Host: "www.krone.at"
    expected:
      content: "GOOD"
      status: 200

balancers:
  balancer1:
#    events:
#      rise:
#        - shell: "echo good"
#      fall:
#        - shell: "baad"
    protocol: TCP
    scheduler: rr
    address: 192.168.239.6
    port: 8080
    nodes:
      alisa:
        active: true
        type: node
        # g = direct routing (gatwaying)
        # m = masquerading
        # i = ipip (tunneling)
        routing: m
        weight: 1
        address: 192.168.0.171
        port: 8080
        health:
          events:
            fall:
              - ruby: |
                  cfg = Moral::Config.instance
                  if cfg.balances.find().nodes.length <= 0
                    all nodes dead exit
                  end
              - shell: "echo died"
              - shell: "curl localhost"
              #- clear: all (all|balancer|node)
              #- clear: node
              #- exit: 1 # exit all threads
            rise:
              - shell: "echo alive"
          interval: 10
          dead_on: 1
          back_on: 1
          type: tcp
          definition:
            timeout: 2
      moritz:
        active: true
        type: node
        routing: m
        weight: 1
        address: www.krone.at
        port: 443
        health:
          type: http
          interval: 2
          dead_on: 1
          back_on: 1
          definition:
            protocol: https
            endpoint: /nachrichten
            headers:
              Host: "www.krone.at"
              custom: "custom"
            timeout: 2
            expected:
              content: "achrichten"
              status: 200
      docker_container:
        type: docker
        routing: m
        weight: 1
        payload:
          name: ^frontend^
          port: 8088
          dynamic: true
        health:
          type: http
          interval: 10
          dead_on: 1
          back_on: 1
          definition:
            endpoint: /v1/health
            timeout: 2
            expectet:
              content: "some string"
              status: 200


  balancer2:
    protocol: TCP
    active: true
    scheduler: rr
    address: 192.168.239.6
    port: 8081
    nodes:
      alisa:
        type: node
        # g = direct routing (gatwaying)
        # m = masquerading
        # i = ipip (tunneling)
        routing: m
        weight: 1
        address: 192.168.239.1
        port: 81
        health:
          window:
            interval: 10
            dead_on: 1
            back_on: 1
          type: tcp
          definition:
            timeout: 2



